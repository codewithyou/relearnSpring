<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"
         version="3.1">

    <display-name>Spring Hello</display-name>

    <!--新建dispatcher-servlet.xml（-servlet前面是在servlet里面定义的servlet名）-->
    <servlet>
        <servlet-name>my-dispatcher</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <load-on-startup>1</load-on-startup>
        <!--如果不配置contextConfigLocation的话，默认会加载的是WEB-INF/servlet-name（即mvc-dispatcher）-servlet.xml-->
        <!--<init-param>-->
          <!--<param-name>contextConfigLocation</param-name>-->
          <!--<param-value>classpath:mvc-my-dispatcher.xml</param-value>-->
        <!--</init-param>-->
    </servlet>


    <!--&lt;!&ndash;用于拦截请求（url-pattern为 / ，说明拦截所有请求），并交由Spring MVC的后台控制器来处理。这一项配置是必须的&ndash;&gt;-->
    <!--<servlet-mapping>-->
        <!--<servlet-name>my-dispatcher</servlet-name>-->
        <!--<url-pattern>/</url-pattern>-->
    <!--</servlet-mapping>-->

    <servlet-mapping>
        <servlet-name>my-dispatcher</servlet-name>
        <!--
        第一种:*.action,访问以.action结尾，由DispatcherServlet进行解析
        第二种:/,所有访问的地址由DispatcherServlet进行解析，对静态文件的解析需要配置不让DispatcherServlet进行解析，
                使用此种方式和实现RESTful风格的url
        第三种:/*,这样配置不对，使用这种配置，最终要转发到一个jsp页面时，仍然会由DispatcherServlet解析jsp地址，
                不能根据jsp页面找到handler，会报错
        -->
        <url-pattern>/</url-pattern>
    </servlet-mapping>








</web-app>